#!/usr/bin/env tsx

import { db } from "#/lib/db";
import { agentsTable } from "#/lib/db/schema/agents";
import { eq } from "drizzle-orm";

async function fixPortugueseErrors() {
  console.log("üîß Corrigindo erros de portugu√™s nos agentes...\n");

  try {
    // Buscar todos os agentes Flash
    const agents = await db
      .select()
      .from(agentsTable)
      .where(eq(agentsTable.is_active, true));

    const flashAgents = agents.filter(agent => agent.id.includes("-flash-agent"));

    console.log(`üìã Corrigindo ${flashAgents.length} agentes Flash...\n`);

    for (const agent of flashAgents) {
      let updatedPrompt = agent.systemPrompt || "";
      let hasChanges = false;

      // Corrigir "atra√ß√£o" ‚Üí "atra√ß√£o"
      if (updatedPrompt.includes("atra√ß√£o")) {
        updatedPrompt = updatedPrompt.replace(/atra√ß√£o/g, "atra√ß√£o");
        hasChanges = true;
        console.log(`‚úÖ Corrigido 'atra√ß√£o' em ${agent.name}`);
      }

      // Corrigir "dentro dos pr√≥ximos X semanas" ‚Üí "dentro das pr√≥ximas X semanas"
      const semanasRegex = /dentro dos pr√≥ximos (\d+) semanas/g;
      if (semanasRegex.test(updatedPrompt)) {
        updatedPrompt = updatedPrompt.replace(semanasRegex, "dentro das pr√≥ximas $1 semanas");
        hasChanges = true;
        console.log(`‚úÖ Corrigido 'dentro dos pr√≥ximos X semanas' em ${agent.name}`);
      }

      // Corrigir "m√≠dias influencer" ‚Üí "m√≠dias de influenciadores"
      if (updatedPrompt.includes("m√≠dias influencer")) {
        updatedPrompt = updatedPrompt.replace(/m√≠dias influencer/g, "m√≠dias de influenciadores");
        hasChanges = true;
        console.log(`‚úÖ Corrigido 'm√≠dias influencer' em ${agent.name}`);
      }

      // Salvar se houve mudan√ßas
      if (hasChanges) {
        await db
          .update(agentsTable)
          .set({
            systemPrompt: updatedPrompt,
            updatedAt: new Date(),
          })
          .where(eq(agentsTable.id, agent.id));
        
        console.log(`üíæ Salvo: ${agent.name}`);
      }
    }

    console.log("\nüéâ Corre√ß√µes conclu√≠das!");

    // Verificar se ainda h√° erros
    console.log("\nüîç Verificando se ainda h√° erros...");
    const allAgents = await db
      .select()
      .from(agentsTable)
      .where(eq(agentsTable.is_active, true));

    const remainingErrors = allAgents.filter(agent => {
      const prompt = agent.systemPrompt || "";
      return prompt.includes("atra√ß√£o") || 
             prompt.includes("dentro dos pr√≥ximos") || 
             prompt.includes("m√≠dias influencer");
    });

    if (remainingErrors.length === 0) {
      console.log("‚úÖ Todos os erros foram corrigidos!");
    } else {
      console.log(`‚ùå Ainda h√° ${remainingErrors.length} agentes com erros:`);
      remainingErrors.forEach(agent => {
        console.log(`   - ${agent.name} (${agent.id})`);
      });
    }

  } catch (error) {
    console.error("‚ùå Erro ao corrigir agentes:", error);
  }
}

fixPortugueseErrors().catch(console.error);
