#!/usr/bin/env tsx

import { db } from "#/lib/db";

async function findPortugueseErrors() {
  console.log("üîç Procurando erros de portugu√™s nos agentes...\n");

  try {
    // Buscar todos os agentes
    const agents = await db.execute(`
      SELECT id, name, system_prompt, expertise, common_services, 
             proposal_structure, key_terms
      FROM agents 
      WHERE is_active = true
      ORDER BY id
    `);

    console.log(`üìã Verificando ${agents.rows.length} agentes...\n`);

    const errors = [];

    for (const agent of agents.rows) {
      const agentErrors = [];

      // Verificar system_prompt
      if (agent.system_prompt) {
        const prompt = agent.system_prompt.toLowerCase();
        
        // "atra√ß√£o" (incorreto) ‚Üí "atra√ß√£o" (correto)
        if (prompt.includes("atra√ß√£o")) {
          agentErrors.push("‚ùå 'atra√ß√£o' encontrado em system_prompt");
        }
        
        // "dentro dos pr√≥ximos 6 semanas" ‚Üí "dentro das pr√≥ximas 6 semanas"
        if (prompt.includes("dentro dos pr√≥ximos") && prompt.includes("semanas")) {
          agentErrors.push("‚ùå 'dentro dos pr√≥ximos X semanas' encontrado em system_prompt");
        }
        
        // "m√≠dias influencer" ‚Üí "m√≠dias de influenciadores"
        if (prompt.includes("m√≠dias influencer")) {
          agentErrors.push("‚ùå 'm√≠dias influencer' encontrado em system_prompt");
        }
      }

      // Verificar arrays
      const arrays = [
        { name: "expertise", data: agent.expertise },
        { name: "common_services", data: agent.common_services },
        { name: "proposal_structure", data: agent.proposal_structure },
        { name: "key_terms", data: agent.key_terms },
      ];

      for (const array of arrays) {
        if (array.data && Array.isArray(array.data)) {
          for (const item of array.data) {
            if (typeof item === "string") {
              const itemLower = item.toLowerCase();
              
              if (itemLower.includes("atra√ß√£o")) {
                agentErrors.push(`‚ùå 'atra√ß√£o' encontrado em ${array.name}: "${item}"`);
              }
              
              if (itemLower.includes("dentro dos pr√≥ximos") && itemLower.includes("semanas")) {
                agentErrors.push(`‚ùå 'dentro dos pr√≥ximos X semanas' encontrado em ${array.name}: "${item}"`);
              }
              
              if (itemLower.includes("m√≠dias influencer")) {
                agentErrors.push(`‚ùå 'm√≠dias influencer' encontrado em ${array.name}: "${item}"`);
              }
            }
          }
        }
      }

      if (agentErrors.length > 0) {
        errors.push({
          agent: agent.name,
          id: agent.id,
          errors: agentErrors,
        });
      }
    }

    if (errors.length === 0) {
      console.log("‚úÖ Nenhum erro de portugu√™s encontrado!");
    } else {
      console.log(`‚ùå Encontrados ${errors.length} agentes com erros:\n`);
      
      errors.forEach((agentError, index) => {
        console.log(`${index + 1}. ${agentError.agent} (${agentError.id})`);
        agentError.errors.forEach(error => {
          console.log(`   ${error}`);
        });
        console.log();
      });
    }

  } catch (error) {
    console.error("‚ùå Erro ao verificar agentes:", error);
  }
}

findPortugueseErrors().catch(console.error);

