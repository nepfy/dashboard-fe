#!/usr/bin/env tsx

import { getAgentByServiceAndTemplate } from "#/modules/ai-generator/agents";

async function testAgentsPortuguese() {
  console.log("üß™ Testando agentes para verificar portugu√™s correto...\n");

  try {
    // Lista de agentes para testar
    const testCases = [
      {
        service: "marketing-digital",
        template: "flash",
        name: "Marketing Digital Flash",
      },
      { service: "design", template: "flash", name: "Design Flash" },
      { service: "fot√≥grafo", template: "flash", name: "Fot√≥grafo Flash" },
      {
        service: "desenvolvedor",
        template: "flash",
        name: "Desenvolvedor Flash",
      },
      { service: "arquiteto", template: "flash", name: "Arquiteto Flash" },
      { service: "m√©dico", template: "flash", name: "M√©dico Flash" },
      {
        service: "marketing-digital",
        template: "prime",
        name: "Marketing Digital Prime",
      },
      { service: "design", template: "prime", name: "Design Prime" },
      {
        service: "development",
        template: "base",
        name: "Desenvolvimento Base",
      },
    ];

    let totalAgents = 0;
    let agentsWithErrors = 0;
    let agentsCorrect = 0;

    for (const testCase of testCases) {
      console.log(`\nüìã TESTE: ${testCase.name}`);
      console.log("=".repeat(50));

      try {
        const agent = await getAgentByServiceAndTemplate(
          testCase.service as any,
          testCase.template as any
        );

        if (agent) {
          totalAgents++;
          console.log(`‚úÖ Agente encontrado: ${agent.name}`);

          // Verificar system prompt
          const systemPrompt = agent.systemPrompt || "";
          const fullText = systemPrompt.toLowerCase();

          // Verificar erros de portugu√™s
          const hasAtracaoIncorrect = fullText.includes("atra√ß√£o");
          const hasProximosSemanas =
            fullText.includes("dentro dos pr√≥ximos") &&
            fullText.includes("semanas");
          const hasMidiasInfluencer = fullText.includes("m√≠dias influencer");

          console.log("\nüîç VERIFICA√á√ÉO DE ERROS:");
          console.log(
            `   ‚ùå 'atra√ß√£o' (incorreto): ${
              hasAtracaoIncorrect ? "SIM" : "N√ÉO"
            }`
          );
          console.log(
            `   ‚ùå 'dentro dos pr√≥ximos X semanas': ${
              hasProximosSemanas ? "SIM" : "N√ÉO"
            }`
          );
          console.log(
            `   ‚ùå 'm√≠dias influencer': ${hasMidiasInfluencer ? "SIM" : "N√ÉO"}`
          );

          if (
            hasAtracaoIncorrect ||
            hasProximosSemanas ||
            hasMidiasInfluencer
          ) {
            agentsWithErrors++;
            console.log("‚ùå Erros de portugu√™s encontrados!");

            // Mostrar contexto dos erros
            if (hasAtracaoIncorrect) {
              const index = fullText.indexOf("atra√ß√£o");
              const context = systemPrompt.substring(
                Math.max(0, index - 30),
                index + 50
              );
              console.log(`   Contexto: "...${context}..."`);
            }
          } else {
            agentsCorrect++;
            console.log("‚úÖ Nenhum erro de portugu√™s encontrado!");
          }

          // Verificar se tem "atra√ß√£o" correto
          const hasAtracaoCorrect = fullText.includes("atra√ß√£o");
          if (hasAtracaoCorrect) {
            console.log("‚úÖ 'atra√ß√£o' (correto) encontrado");
          }
        } else {
          console.log("‚ùå Agente n√£o encontrado");
        }
      } catch (error) {
        console.log(`‚ùå Erro ao buscar agente: ${error}`);
      }
    }

    console.log("\n" + "=".repeat(80));
    console.log("üìä RESUMO DOS TESTES:");
    console.log(`   Total de agentes testados: ${totalAgents}`);
    console.log(`   ‚úÖ Agentes corretos: ${agentsCorrect}`);
    console.log(`   ‚ùå Agentes com erros: ${agentsWithErrors}`);

    if (agentsWithErrors === 0) {
      console.log("\nüéâ Todos os agentes est√£o com portugu√™s correto!");
    } else {
      console.log(
        `\n‚ö†Ô∏è ${agentsWithErrors} agentes ainda t√™m erros de portugu√™s.`
      );
    }
  } catch (error) {
    console.error("‚ùå Erro ao testar agentes:", error);
  }
}

testAgentsPortuguese().catch(console.error);

